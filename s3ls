#!/usr/bin/env python3

import heapq
import boto3
import re
import getopt
import sys


USAGE = '''s3ls [ -h ] [ -k ] [ -m ] [ -g ] [ -N limit ] [ -r ] bucket
    -h: show this help
    -k: report sizes in kilobytes
    -m: report sizes in megabytes
    -g: report sizes in gigabytes
    -N: list up to limit number of files
    -r: reverse sorted order
    bucket: a regex matching bucket names'''


# formatters
fmt_time = lambda t: t.strftime('%a, %d %b %Y %H:%M:%S %z')
KB = lambda n: '{:.2} kB'.format(n / 1024)
MB = lambda n: '{:.2} MB'.format((n // 1024) / 1024)
GB = lambda n: '{:.2} GB'.format((n // 1024**2) / 1024)


def die_usage():
    print(USAGE, file=sys.stderr)
    sys.exit(100)


def posint(s):
    r = int(s)
    if r < 0:
        raise ValueError('invalid literal for posint() with base 10: \'{}\''.format(s))
    return r


if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:],'hkmgN:r')
    except getopt.GetoptError as err:
        print(err, file=sys.stderr)
        die_usage()
    if len(args) > 1:
        die_usage()

    opt_reverse = False
    opt_size = lambda n: '{}'.format(n)
    opt_limit = None
    opt_regex = re.compile('.*')

    for o, a in opts:
        if o == '-h':
            print(USAGE, file=sys.stderr)
            sys.exit(0)
        elif o == '-k':
            opt_size = KB
        elif o == '-m':
            opt_size = MB
        elif o == '-g':
            opt_size = GB
        elif o == '-r':
            opt_reverse = True
        elif o == '-N':
            try:
                opt_limit = posint(a)
            except ValueError as err:
                print('Bad argument for -N: {}'.format(a), file=sys.stderr)
                die_usage()
    if args:
        opt_regex = re.compile('^{}$'.format(args[0]))

    # Start boto and read bucket information from s3
    s3 = boto3.resource('s3')
    objheap = []

    for bucket in s3.buckets.all():
        if not opt_regex.match(bucket.name):
            continue

        modified_max = bucket.creation_date
        nfiles = 0
        size = 0

        # and every object per matched bucket
        for i, obj in enumerate(bucket.objects.all()):
            heapq.heappush(objheap, ((obj.last_modified, i), obj))
            nfiles = nfiles + 1
            size = size + obj.size
            if obj.last_modified > modified_max:
                modified_max = obj.last_modified

        print('\t'.join((
            bucket.name,
            fmt_time(modified_max),
            opt_size(size),
            fmt_time(bucket.creation_date),
            '{}'.format(nfiles),
        )))

    objsorted = [ heapq.heappop(objheap)[1] for i in range(len(objheap)) ]
    objiter = reversed(objsorted) if opt_reverse else objsorted

    for i, obj in enumerate(objiter):
        if opt_limit and i >= opt_limit:
            break
        print('\t'.join((
            '{}/{}'.format(obj.bucket_name, obj.key),
            fmt_time(obj.last_modified),
            opt_size(obj.size),
        )))
